# JSON(JavaScript Object Notation) 이란?

Ajax 서버통신시 데이터 전송을 위한 포맷으로 XML, JSON을 많이 사용함.
모두 플랫폼에 구애받지 않는 데이터전송포맷.

* xml 
    * 태그를 이용하여 작성하기 간편하고, 사람도 읽기 쉽다. dtd(Document Type Definition)를 이용한 확장이 쉽다.
    (xml은 DOCTYPE선언을 통해 dtd파일을 다운로드 받음)
    * 태그등의 반복으로 실제 데이터 외적으로 용량이 커지기 쉽고, 파싱하는데 무거워짐.
* json 
    * 객체{} 또는 배열[] 로 데이터를 효율적으로 표시하므로,  xml대비 용량이 적고, 속도가 빠르다.
    * 데이터무결성을 개발자가 직접 검증해야함. (xml은 스키마(xsd)를 사용해서 검증가능.)




## JavaScript Object Notation : 자바스크립트 객체 표기법
JSON 을 사용하여 모든 데이터형을 서버와 주고 받을 수 있다.

* 숫자 
* 문자열
* boolean
* 배열
* 객체 
* null



객체의 경우, `{` 으로 시작하여 `}` 으로 끝나며 그 속에 데이터를 표기하는데 `key:값(Value)`쌍으로 구성된다. 

key는 문자열로 표현하므로 반드시 쌍따옴표를 해야하고, 값(Value)은 기본자료형이나 문자열, 배열, 객체가 되어진다.
 {"key1":90, "key2":"이순신", "key3":true} 형태로 되어지며 각쌍의 순서를 보장하지 않는다.
 순서는 의미가 없고 오로지 `key:값`쌍이 올바르게 매핑만 되어있으면 된다.

	{
	    "name" : "이순신",
	    "age" : 27,
	    "birth" : "1990-01-01",
	    "gender" : "남",
	    "marry" : true,
	    "address" : "서울특별시 강남구 역삼동 1번지",
	    "family" : {"father"  : "이아빠", 
	                "mother"  : "김엄마", 
	                "brother" : "이동생"}
	 }
 
 
 자바, JSP, 서블릿, 스프링에서 JSON 사용한 데이터 전송을 하려면 먼저 JSON 데이터 포맷을 위한 라이브러리가 필요함.
 [http://json.org](http://json.org) 사이트에 가면 여러 목록이 보여지는데 그중 Java 에 가면
 json-simple 이 보일 것이다. 
 [여기](http://d.pr/f/LFwH) 를 클릭하여 json_simple-1.1.jar 파일을 다운받는다. 
[json-simple 소스파일 ](https://github.com/fangyidong/json-simple)
 
 
 ### :: 1.JSP 에서의 JSON 형태로 데이터 표현하기 예제 ::

 personInfo.jsp 파일

	<%@ page language="java" contentType="text/html; charset=UTF-8"
	    pageEncoding="UTF-8"%>
	<%@ page import="org.json.simple.JSONObject" %>
	
	<%
		JSONObject personObj = new JSONObject();
	
		personObj.put("name", "이순신");
		personObj.put("age", new Integer(27));
		personObj.put("height", new Double(171.5));
		personObj.put("phone", "010-345-6789");
		personObj.put("email", "leess@naver.com");
		personObj.put("address", "서울시 강남구 역삼동 1번지");
		
		out.println(personObj);
		out.flush();
	%>

> personInfo.jsp 파일을 톰캣서버에서 실행하여 웹브라우저에 나타난 결과는 아래와 같이 나온다.

{"phone":"010-345-6789","height":171.5,"address":"서울시 강남구 역삼동 1번지","email":"leess@naver.com","age":27,"name":"이순신"}



### :: 2.스프링이나 서블릿 에서의 JSON 형태로 데이터 표현하기 예제::

	public ModelAndView data(HttpServletRequest request, 
	        HttpServletResponse response) throws Exception{
	        
	    PrintWriter out = response.getWriter();
	    
	    JSONObject personObj = new JSONObject();
	    
	    personObj.put("name", "이순신");
		personObj.put("age", new Integer(27));
		personObj.put("height", new Double(171.5));
		personObj.put("phone", "010-345-6789");
		personObj.put("email", "leess@naver.com");
		personObj.put("address", "서울시 강남구 역삼동 1번지");
	    
	    out.print(personObj);
	    out.flush();
	    out.close();    
	     
	    return null;
	    
	}



## JSON과 $.each()함수
리턴된 정보 each함수로 처리하기.
`$.each(1개의객체 또는 배열, function(key, value));`

[참고링크](http://api.jquery.com/jquery.each/) 

* 1개의객체(key와 value값으로 이루어진 json)를 다루는 경우에는, function의 첫번째 인자는 key값을 가진다.
	* `$.each(1개의객체, function(key, value));`
* 배열을 다루는 경우에는, function의 첫번째 인자는 배열의 방번호(0 ~ n)를 가진다.
	* `$.each(배열, function(index, value));`

### json타입으로 넘어온 복수개의 정보(배열) 처리하기
현재 data는 배열(key/value로 이루어진 객체가 복수개 담겨져 있다.)
[{"key":value, "key":val, "key":val....}
, {"key":value, "key":val, "key":val....}
, {"key":value, "key":val, "key":val....}...]

고로, $.each(data, function(index, entry){});에서
첫번째 파라미터 index는 배열의 index이고,
두번째 파라미터 entry는 각각의 {"key":value, "key":val, "key":val....}를 가리킨다.

db에서부터 정보를 얻어오기 위해서는 두번째 파라미터 entry를 사용해야 한다.
`entry.키값`으로 각 정보에 접근한다.

* `entry.subject`	
* `entry.author`	
* `entry.ttl`

![](http://d.pr/i/3CCo+) 



 
 