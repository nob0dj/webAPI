/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.48
 * Generated at: 2018-05-06 10:01:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ServerSentEvents;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class serverSentEvents_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Web API - Server Sent Event</title>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/jquery-3.2.1.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("div.area{width:500px; min-height:200px; padding:10px; border:1px solid gray;}\r\n");
      out.write("table, th, td{border:1px solid;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>Web API - Server Sent Event</h2>\r\n");
      out.write("\t<ul style=\"list-style:none\">\r\n");
      out.write("\t\t<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\">MDN API</a></li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<h3>EventSource Object</h3>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li>onopen : When a connection to the server is opened</li>\r\n");
      out.write("\t\t<li>onmessage : When a message is received</li>\r\n");
      out.write("\t\t<li>onerror\t: When an error occurs</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<button id=\"start1\">start</button>\r\n");
      out.write("\t<button id=\"end1\">end</button> \r\n");
      out.write("\t<br /><br />\r\n");
      out.write("\t<div id=\"area1\" class=\"area\" ></div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\twindow.onload=function(){\r\n");
      out.write("\t\tvar start1 = document.getElementById(\"start1\");\r\n");
      out.write("\t\tvar end1 = document.getElementById(\"end1\");\r\n");
      out.write("\t\tvar source;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tstart1.addEventListener(\"click\", function(){\r\n");
      out.write("\t\t\tif (window.EventSource) {\r\n");
      out.write("\t\t\t\tconsole.log(\"sse 사용가능!\")\r\n");
      out.write("\t\t\t  source = new EventSource('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sse/test1.do');\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  source.addEventListener(\"open\", function(e){\r\n");
      out.write("\t\t\t\tconsole.log(\"onopen event!\");  \r\n");
      out.write("\t\t\t\tdocument.getElementById(\"area1\").innerHTML += \"--- Server Sent Events opened ---<br>\";\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  source.addEventListener(\"message\", function(e){\r\n");
      out.write("\t\t\t\tconsole.log(\"onmessage event!\");\r\n");
      out.write("\t\t\t\tconsole.log(e);\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"area1\").innerHTML += e.data+\"<br>\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  source.addEventListener(\"error\", function(e){\r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t  if (e.readyState == EventSource.CLOSED) {\r\n");
      out.write("\t\t\t\t\t//CONNECTING:0, OPEN:1, CLOSED:2\r\n");
      out.write("\t\t\t\t  \t// Connection was closed.\r\n");
      out.write("\t\t\t  \t\tconsole.log(\"connection closed!\");  \r\n");
      out.write("\t\t\t\t  }\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t  // Result to xhr polling :(\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tend1.addEventListener(\"click\",function(){\r\n");
      out.write("\t\t\tconsole.log(\"connection closing...\");\r\n");
      out.write("\t\t\tsource.close();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<h3>ServerSentEvent - JSON데이터처리</h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<button id=\"start2\">start</button>\r\n");
      out.write("\t<button id=\"end2\">end</button> \r\n");
      out.write("\t<br /><br />\r\n");
      out.write("\t<div id=\"area2\" class=\"area\" ></div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\tvar source;\r\n");
      out.write("\t\t$(\"#start2\").click(function(){\r\n");
      out.write("\t\t\tif (window.EventSource) {\r\n");
      out.write("\t\t\t  console.log(\"sse 사용가능!\")\r\n");
      out.write("\t\t\t  source = new EventSource('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sse/test2.do');\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  //jquery사용하지 말것. 이벤트 처리 오류 발생\r\n");
      out.write("\t\t\t  source.addEventListener(\"open\",function(e){\r\n");
      out.write("\t\t\t\tconsole.log(\"onopen event!\");  \r\n");
      out.write("\t\t\t\t$(\"#area2\").html(\"--- Server Sent Events opened ---<br>\");\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  //$(source).on(\"message\", function(e){\r\n");
      out.write("\t\t\t  source.addEventListener(\"message\",function(e){\r\n");
      out.write("\t\t\t\tconsole.log(\"onmessage event!\");\r\n");
      out.write("\t\t\t\tconsole.log(e.data);\r\n");
      out.write("\t\t\t\t//json파싱\r\n");
      out.write("\t\t\t\tvar obj = JSON.parse(e.data);\r\n");
      out.write("\t\t\t\tvar table = $(\"<table></table>\");\r\n");
      out.write("\t\t\t\tvar html = \"<tr><th>아이디</th><td>\"+obj.userId+\"</td></tr>\";\r\n");
      out.write("\t\t\t\thtml += \"<tr><th>이름</th><td>\"+obj.userName+\"</td></tr>\";\r\n");
      out.write("\t\t\t\thtml += \"<tr><th>주소</th><td>\"+obj.userAddr+\"</td></tr>\";\r\n");
      out.write("\t\t\t\t$(\"#area2\").html(table.html(html));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  source.addEventListener(\"error\", function(e){\r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t  if (e.readyState == EventSource.CLOSED) {\r\n");
      out.write("\t\t\t\t\t//CONNECTING:0, OPEN:1, CLOSED:2\r\n");
      out.write("\t\t\t\t  \t// Connection was closed.\r\n");
      out.write("\t\t\t  \t\tconsole.log(\"connection closed!\");  \r\n");
      out.write("\t\t\t\t  }\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t  // Result to xhr polling :(\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#end2\").click(function(){\r\n");
      out.write("\t\t\tconsole.log(\"connection closing...\");\r\n");
      out.write("\t\t\tsource.close();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<h3>@실습문제 : JSON데이터처리</h3>\r\n");
      out.write("\t<p>회원목록 전체를 sse를 통해 화면에 출력하되, 10초마다 갱신될 수 있도록 하세요.</p>\r\n");
      out.write("\t<button id=\"start3\">start</button>\r\n");
      out.write("\t<button id=\"end3\">end</button> \r\n");
      out.write("\t<br /><br />\r\n");
      out.write("\t<div id=\"area3\" class=\"area\" ></div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\tvar source;\r\n");
      out.write("\t\t$(\"#start3\").click(function(){\r\n");
      out.write("\t\t\tif (window.EventSource) {\r\n");
      out.write("\t\t\t  source = new EventSource('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sse/test3.do');\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  source.addEventListener(\"open\",function(e){\r\n");
      out.write("\t\t\t\tconsole.log(\"onopen event!\");  \r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  //$(source).on(\"message\", function(e){\r\n");
      out.write("\t\t\t  source.addEventListener(\"message\",function(e){\r\n");
      out.write("\t\t\t\tconsole.log(\"onmessage event!\");\r\n");
      out.write("\t\t\t\tconsole.log(e.data);\r\n");
      out.write("\t\t\t\t//json파싱\r\n");
      out.write("\t\t\t\tvar userArr = JSON.parse(e.data);\r\n");
      out.write("\t\t\t\tvar table = $(\"<table></table>\");\r\n");
      out.write("\t\t\t\ttable.append(\"<tr><th>아이디</th><th>이름</th><th>주소</th></tr>\");\r\n");
      out.write("\t\t\t\tfor(var i in userArr){\r\n");
      out.write("\t\t\t\t\tvar u = userArr[i];\r\n");
      out.write("\t\t\t\t\tvar html = \"<tr><td>\"+u.userId+\"</td>\";\r\n");
      out.write("\t\t\t\t\thtml += \"<td>\"+u.userName+\"</td>\";\r\n");
      out.write("\t\t\t\t\thtml += \"<td>\"+u.userAddr+\"</td></tr>\";\r\n");
      out.write("\t\t\t\t\ttable.append(html);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#area3\").html(table);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  source.addEventListener(\"error\", function(e){\r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t  if (e.readyState == EventSource.CLOSED) {\r\n");
      out.write("\t\t\t\t\t//CONNECTING:0, OPEN:1, CLOSED:2\r\n");
      out.write("\t\t\t\t  \t// Connection was closed.\r\n");
      out.write("\t\t\t  \t\tconsole.log(\"connection closed!\");  \r\n");
      out.write("\t\t\t\t  }\r\n");
      out.write("\t\t\t  });\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t  // Result to xhr polling :(\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#end3\").click(function(){\r\n");
      out.write("\t\t\tconsole.log(\"connection closing...\");\r\n");
      out.write("\t\t\tsource.close();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
